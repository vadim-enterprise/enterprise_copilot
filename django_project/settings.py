"""
Django settings for django_webapp project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-q5(d0j*erh^x=rjleyuz3a%5rbj5f#cn$l1$!cb5@5lygoq3vp"
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
CHROMA_DATA_PATH = os.path.join(BASE_DIR, 'chroma_data')

os.makedirs(CHROMA_DATA_PATH, exist_ok=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

DATA_UPLOAD_MAX_MEMORY_SIZE = 1073741824 
FILE_UPLOAD_MAX_MEMORY_SIZE = 1073741824  

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '[::1]',
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "software_auction.apps.SoftwareAuctionConfig",
    "channels"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CSRF_TRUSTED_ORIGINS = ['https://www.b2bappstore.click']

ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'software_auction/templates'), 
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"
ASGI_APPLICATION = "django_project.asgi.application"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'pred_genai',
        'USER': 'glinskiyvadim',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '5540',
        'OPTIONS': {
            'sslmode': 'disable',
            'gssencmode': 'disable',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-eval'") 

CSRF_COOKIE_NAME = 'csrftoken'
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'software_auction/static'),  # Primary static files location
]

# Directory where static files will be collected (for production)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Microsoft Graph API Settings
MS_TENANT_ID = 'your_tenant_id'
MS_CLIENT_ID = 'your_client_id'
MS_CLIENT_SECRET = 'your_client_secret'
MS_USER_ID = 'your_user_id'  

#Place to store ML models
MODELS = os.path.join(BASE_DIR, 'ml_models')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'software_auction': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# If you have any JavaScript-specific settings, update them
JS_FILES = {
    'software_auction': [
        'software_auction/js/cart.js',
    ]
}

# AI Model Configuration
AI_MODEL_CONFIG = {
    'USE_LLAMA': False,  # Default to OpenAI
    'OPENAI_MODEL': "gpt-4o",
    'TEMPERATURE': 0.7,
}

# Add to existing settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Update CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# Search Settings
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
SEARCH_ENGINE_ID = os.getenv('SEARCH_ENGINE_ID')
MAX_SEARCH_RESULTS = 10
CACHE_EXPIRATION = 3600  # 1 hour
MIN_SIMILARITY_SCORE = 0.6

# Model Settings
GPT_MODEL_NAME = os.getenv('GPT_MODEL_NAME')
EMBEDDING_MODEL_NAME = "text-embedding-ada-002"
DEFAULT_TEMPERATURE = 0.7
DEFAULT_MAX_TOKENS = 500

# Cache Settings
CACHE_TIMEOUT = 300  # 5 minutes

# Knowledge Base Settings
KNOWLEDGE_BASE_DIR = os.path.join(BASE_DIR, 'knowledge_base')
os.makedirs(KNOWLEDGE_BASE_DIR, exist_ok=True)

# Update existing AI_MODEL_CONFIG if needed
AI_MODEL_CONFIG.update({
    'USE_LLAMA': False,  # Default to OpenAI
    'OPENAI_MODEL': GPT_MODEL_NAME,
    'TEMPERATURE': DEFAULT_TEMPERATURE,
})